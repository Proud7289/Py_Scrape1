from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time

# Path to GeckoDriver
geckodriver_path = r'C:\Users\user\env1\geckodriver.exe'

# Path to Firefox binary
firefox_binary_path = r'C:\Program Files\Mozilla Firefox\firefox.exe'  # Update with your Firefox installation path

# Create Service and Options objects
service = Service(executable_path=geckodriver_path)
options = Options()
options.binary_location = firefox_binary_path

# Initialize WebDriver with Service and Options
driver = webdriver.Firefox(service=service, options=options)

# Navigate to the webpage
driver.get('https://www.example.com')  # Replace with your target URL

# Wait for 5 seconds
time.sleep(5)

try:
    # Wait until the elements with class 'word_ars' and 'volume61' are present
    WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, 'word_ars'))
    )

    # Find all <span> tags with the class 'word_ars' and 'volume61'
    span_elements = driver.find_elements(By.CLASS_NAME, 'word_ars')
    count_elements = driver.find_elements(By.CLASS_NAME, 'volume61')

    # Extract text from each <span> tag
    hashtags = [span.text for span in span_elements]

    # Extract tweet counts and handle any missing ones
    counts = []
    for count in count_elements:
        try:
            counts.append(int(count.text.replace(' tweet', '').replace('.', '')))
        except ValueError:
            counts.append(None)  # Append None if the tweet count is not a valid integer

    # Handle unmatched lengths
    if len(hashtags) > len(counts):
        counts.extend([None] * (len(hashtags) - len(counts)))
    elif len(counts) > len(hashtags):
        hashtags.extend([''] * (len(counts) - len(hashtags)))

    # Create a DataFrame with the hashtags and tweet counts
    df = pd.DataFrame({
        'Hashtag': hashtags,
        'Tweet Count': counts
    })

    # Drop any rows where 'Tweet Count' is None (optional)
    df.dropna(subset=['Tweet Count'], inplace=True)

    # Group by 'Hashtag' and sum the 'Tweet Count' to combine duplicates
    df = df.groupby('Hashtag', as_index=False).sum()

    # Sort by 'Tweet Count' in descending order
    df = df.sort_values(by='Tweet Count', ascending=False)

    # Reset the index to start from 1
    df.reset_index(drop=True, inplace=True)
    df.index += 1

    # Save DataFrame to Excel file at the specified path
    output_path = r'C:\Users\user\env1\output1_unique_sorted.xlsx'
    df.to_excel(output_path, index_label='Index', engine='openpyxl')

finally:
    # Close the browser
    driver.quit()
